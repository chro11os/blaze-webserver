use rocket::serde::json::Json;
use rocket::State;
use serde::{Deserialize, Serialize};

// Import the database state and error type from main.rs
use crate::{DbState, AppError};

#[derive(Serialize, Deserialize, sqlx::FromRow)]
pub struct User {
    pub id: i64, // SQLite's autoincrementing IDs are i64
    pub name: String,
}

// This struct is for creating a new user, as the ID is generated by the DB
#[derive(Deserialize)]
pub struct NewUser {
    pub name: String,
}

#[post("/users", format = "json", data = "<new_user>")]
pub async fn create_user(
    db_state: &State<DbState>,
    new_user: Json<NewUser>,
) -> Result<Json<User>, AppError> {
    let user = sqlx::query_as!(
        User,
        "INSERT INTO users (name) VALUES (?) RETURNING id, name",
        new_user.name
    )
        .fetch_one(&db_state.pool)
        .await
        .map_err(AppError::DatabaseError)?;

    Ok(Json(user))
}

#[get("/users/<id>")]
pub async fn get_user(
    db_state: &State<DbState>,
    id: i64,
) -> Result<Json<User>, AppError> {
    let user = sqlx::query_as!(
        User,
        "SELECT id, name FROM users WHERE id = ?",
        id
    )
        .fetch_one(&db_state.pool)
        .await
        .map_err(AppError::DatabaseError)?;

    Ok(Json(user))
}